#BlueJ class context
comment0.target=AbstractGraph
comment1.params=
comment1.target=AbstractGraph()
comment1.text=Construct\ an\ empty\ graph
comment10.params=index
comment10.target=java.lang.Object\ getVertex(int)
comment11.params=v
comment11.target=int\ getIndex(java.lang.Object)
comment12.params=index
comment12.target=java.util.List\ getNeighbors(int)
comment13.params=v
comment13.target=int\ getDegree(int)
comment14.params=
comment14.target=void\ printEdges()
comment15.params=
comment15.target=void\ clear()
comment16.params=vertex
comment16.target=boolean\ addVertex(java.lang.Object)
comment17.params=e
comment17.target=boolean\ addEdge(AbstractGraph.Edge)
comment17.text=Add\ an\ edge\ to\ the\ graph
comment18.params=u\ v
comment18.target=boolean\ addEdge(int,\ int)
comment19.params=v
comment19.target=AbstractGraph.Tree\ dfs(int)
comment2.params=vertices\ edges
comment2.target=AbstractGraph(java.lang.Object[],\ int[][])
comment2.text=Construct\ a\ graph\ from\ vertices\ and\ edges\ stored\ in\ arrays
comment20.params=u\ parent\ searchOrder\ isVisited
comment20.target=void\ dfs(int,\ int[],\ java.util.List,\ boolean[])
comment20.text=Recursive\ method\ for\ DFS\ search
comment21.params=
comment21.target=int\ countEdges()
comment22.params=u\ parent\ searchOrder\ isVisited\ edges
comment22.target=void\ countEdges(int,\ int[],\ java.util.List,\ boolean[],\ int)
comment22.text=Recursive\ method\ for\ DFS\ search
comment23.params=v
comment23.target=AbstractGraph.Tree\ bfs(int)
comment24.params=u\ v
comment24.target=java.util.List\ getPath(int,\ int)
comment25.params=
comment25.target=boolean\ isCyclic()
comment26.params=
comment26.target=boolean\ isBipartite()
comment27.params=origin\ visited\ g1\ g2
comment27.target=boolean\ isBipartite(int,\ boolean[],\ java.util.List,\ java.util.List)
comment28.params=
comment28.target=java.util.List\ getBipartite()
comment3.params=vertices\ edges
comment3.target=AbstractGraph(java.util.List,\ java.util.List)
comment3.text=Construct\ a\ graph\ from\ vertices\ and\ edges\ stored\ in\ List
comment4.params=edges\ numberOfVertices
comment4.target=AbstractGraph(java.util.List,\ int)
comment4.text=Construct\ a\ graph\ for\ integer\ vertices\ 0,\ 1,\ 2\ and\ edge\ list
comment5.params=edges\ numberOfVertices
comment5.target=AbstractGraph(int[][],\ int)
comment5.text=Construct\ a\ graph\ from\ integer\ vertices\ 0,\ 1,\ and\ edge\ array
comment6.params=edges\ numberOfVertices
comment6.target=void\ createAdjacencyLists(int[][],\ int)
comment6.text=Create\ adjacency\ lists\ for\ each\ vertex
comment7.params=edges\ numberOfVertices
comment7.target=void\ createAdjacencyLists(java.util.List,\ int)
comment7.text=Create\ adjacency\ lists\ for\ each\ vertex
comment8.params=
comment8.target=int\ getSize()
comment9.params=
comment9.target=java.util.List\ getVertices()
numComments=29
